#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2013 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category		i-MSCP
# @copyright	2010-2013 by i-MSCP | http://i-mscp.net
# @author		Daniel Andreca <sci2tech@gmail.com>
# @link			http://i-mscp.net i-MSCP Home Site
# @license		http://www.gnu.org/licenses/gpl-2.0.html GPL v2

# TODO: This script should be idempotent.

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..";
use lib "$FindBin::Bin/../PerlLib";

use iMSCP::Debug;
use iMSCP::Boot;
use iMSCP::Dialog;
use iMSCP::Dir;
use iMSCP::File;
use iMSCP::Dialog;
use iMSCP::Stepper;
use iMSCP::Database;
use iMSCP::SystemGroup;
use iMSCP::Execute;
use iMSCP::Servers;
use iMSCP::Getopt;

# Turn off localisation features to force any command output to be in english
$ENV{'LC_MESSAGES'} = 'C';

umask(027);

newDebug('imscp-uninstall.log');

silent(1);

sub startUp
{
	iMSCP::Getopt->debug(1); # Enforce debug mode (logs)
	iMSCP::Boot->getInstance()->boot();

	0;
}

sub process
{
	_userDialog();

	my @steps = (
		[\&_removeCustomers, 'Removing i-MSCP customers'],
		[\&_uninstallServers, 'Uninstalling i-MSCP servers'],
		[\&_uninstallDaemons, 'Uninstalling i-MSCP daemons'],
		[\&_removeCrontabFile, 'Removing i-MSCP crontab file'],
		[\&_removeLogrotateFile, 'Removing i-MSCP logorate file'],
		[\&_removeSqlData, 'Removing i-MSCP SQL data'],
		[\&_removeiMSCPSystemGroup, 'Removing i-MSCP system group'],
		[\&_removeFiles, 'Removing i-MSCP files'],
	);

	my $rs = 0;
	my $step = 1;

	for (@steps){
		$rs = step($_->[0], $_->[1], scalar @steps, $step);
		return $rs if $rs;
		$step++;
	}

	iMSCP::Dialog->factory()->endGauge() if iMSCP::Dialog->factory()->hasGauge();

	0;
}

sub shutDown
{

	iMSCP::Dialog->factory()->msgbox(
"
\\Z1Congratulations\\Zn

iMSCP has been successfully uninstalled.

You can find uninstallation logs at /tmp/imscp-uninstall.log
"
	);

	0;
}

sub _userDialog
{
	iMSCP::Dialog->factory()->set('yes-label','Continue');
	iMSCP::Dialog->factory()->set('no-label','Exit');
	iMSCP::Dialog->factory()->set('defaultno', '');

	if (iMSCP::Dialog->factory()->yesno(
"
Welcome to the \\Z1i-MSCP version $main::imscpConfig{'Version'}\\Zn uninstaller dialog.

This program will uninstall i-MSCP from your server.

\\Zu\\Z1[WARNING]\\Zn

All i-MSCP data will be removed.

\\Zu\\Z4[NOTE]\\Zn

During the uninstallation process some or all services might require to be shut down or restarted.

To continue select \\Z1Continue\\Z0
"

	)) {
		iMSCP::Dialog->factory()->msgbox(
"\
\\Z1[NOTICE]\\Zn

Uninstallation process has been aborted...
"
		);

		exit 0;
	}
}

sub _removeCustomers
{
	my $tables = {
		admin => ['admin_status', "AND `admin_type` = 'user'"],
		domain => 'domain_status',
		domain_aliasses => 'alias_status',
		subdomain => 'subdomain_status',
		subdomain_alias => 'subdomain_alias_status',
		mail_users => 'status',
		htaccess => 'status',
		htaccess_groups => 'status',
		htaccess_users => 'status',
		ssl_certs => 'status'
	};

	my $database = iMSCP::Database->new()->factory();

	my $aditionalCondition;

	while (my ($table, $field) = each %$tables) {
		if(ref $field eq 'ARRAY') {
			$aditionalCondition = $field->[1];
			$field = $field->[0];
		} else {
			$aditionalCondition = ''
		}

		my $rdata = $database->doQuery('dummy', "UPDATE `$table` SET `$field` = 'todelete' $aditionalCondition");
		unless(ref $rdata eq 'HASH') {
			error($rdata);
			return 1;
		}
	}

	iMSCP::Boot->getInstance()->unlock();

	my ($rs, $stdout, $stderr);
	$rs = execute(
		"$main::imscpConfig{'CMD_PERL'} $main::imscpConfig{'ENGINE_ROOT_DIR'}/imscp-rqst-mngr", \$stdout, \$stderr
	);
	debug($stdout) if $stdout;
	error($stderr) if $stderr && $rs;
	error("Error while deleting customers") if $rs && ! $stderr;
	return $rs if $rs;

	iMSCP::Boot->getInstance()->lock();

	0;
}

sub _uninstallServers
{
	my ($rs, $file, $class, $server, $msg);

	my $step = 1;

	startDetail();

	for(iMSCP::Servers->getInstance()->get()) {
		s/\.pm//;
		$file = "Servers/$_.pm";
		$class = "Servers::$_";
		require $file;

		$server = $class->factory();

		if($server->can('uninstall')) {
			$msg = "Performing uninstall tasks for the $_ server" .
				($main::imscpConfig{uc($_) . '_SERVER'} ? ': ' . $main::imscpConfig{uc($_) . '_SERVER'} : '');

			$rs = step(sub{ $server->uninstall() }, $msg, scalar @servers, $step);
			return $rs if $rs;
		}

		$step++;
	}

	endDetail();

	0;
}

sub _uninstallDaemons
{
	my ($rs, $stdout, $stderr);

	for ($main::imscpConfig{'CMD_IMSCPN'}, $main::imscpConfig{'CMD_IMSCPD'}) {
		my $filename = $_;
		my ($serviceName) = /.*\/([^\/]*)$/;

		if(-f $filename) {
			# Removing services  (Debian, Ubuntu)
			$rs = execute("/usr/sbin/update-rc.d -f $serviceName remove", \$stdout, \$stderr);
			debug($stdout) if $stdout;
			error($stderr) if $stderr && $rs;
			return $rs if $rs;

			$rs = iMSCP::File->new('filename' => $filename)->delFile();
			return $rs if $rs;
		}
	}

	0;
}

sub _removeCrontabFile
{
	my $rs = 0;

	$rs = iMSCP::File->new('filename' =>'/etc/cron.d/imscp')->delFile() if -f '/etc/cron.d/imscp';

	$rs;
}

sub _removeLogrotateFile
{
	my $rs = 0;

	iMSCP::File->new('filename' =>'/etc/logrotate.d/imscp')->delFile() if -f '/etc/logrotate.d/imscp';

	$rs;
}

# FIXME: Too many assumptions are made here. The names of sql users to remove must be based on the usernames as entered
# by administrator during setup
# FIXME: All SQL user as created by i-MSCP are not removed (roundcube sql user)
# FIXME: localhost is not always the correct value
#
# FIXME: It is not better to add uninstaller for each addons and call them as we already do for the server implementations?
sub _removeSqlData
{
	my $database = iMSCP::Database->factory();

	my $rdata = $database->doQuery('sqlu_name', 'SELECT DISTINCT(`sqlu_name`) FROM `sql_user`');

	unless(ref $rdata eq 'HASH') {
		error($rdata);
		return 1;
	}

	for (keys %{$rdata}) {
		# We do not catch any error and it's expected
		$database->doQuery('delete', "DROP USER ?@?", $rdata->{$_}->{'sqlu_name'}, 'localhost');
		$database->doQuery('delete', "DROP USER ?@?", $rdata->{$_}->{'sqlu_name'}, '%');
	}

	$rdata = $database->doQuery('sqld_name', 'SELECT `sqld_name` FROM `sql_database`');
	unless(ref $rdata eq 'HASH') {
		error($rdata);
		return 1;
	}

	# We do not catch any error and it's expected
	$database->doQuery('delete', "DROP DATABASE $rdata->{$_}->{'sqld_name'}") for keys %$rdata;
	$database->doQuery('delete', "DROP USER ?@?", 'pma', 'localhost');
	$database->doQuery('delete', "DROP USER ?@?", 'pma', '%');

	$rdata = $database->doQuery('dummy', 'FLUSH PRIVILEGES');
	unless(ref $rdata eq 'HASH') {
		error($rdata);
		return 1;
	}

	$database->doQuery('delete', "DROP DATABASE $main::imscpConfig{'DATABASE_NAME'}");
	unless(ref $rdata eq 'HASH') {
		error($rdata);
		return 1;
	}

	0;
}

sub _removeiMSCPSystemGroup
{
	iMSCP::SystemGroup->new()->delSystemGroup($main::imscpConfig{'MASTER_GROUP'});
}

sub _removeFiles
{
	my $rs = 0;

	chdir('/');

	for (
		$main::imscpConfig{'CONF_DIR'}, $main::imscpConfig{'USER_WEB_DIR'}, $main::imscpConfig{'LOG_DIR'},
		$main::imscpConfig{'ROOT_DIR'}
	) {
		$rs = iMSCP::Dir->new('dirname' => $_)->remove() if -d $_;
		return $rs if $rs;
	}

	0;

}

my $rs = 0;

$rs ||= startUp();
$rs ||= process();
$rs ||= shutDown();

exit $rs;
