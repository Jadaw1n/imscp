#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2013 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category		i-MSCP
# @copyright	2010-2013 by i-MSCP | http://i-mscp.net
# @author		Daniel Andreca <sci2tech@gmail.com>
# @link			http://i-mscp.net i-MSCP Home Site
# @license		http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..";
use lib "$FindBin::Bin/../PerlLib";
use lib "$FindBin::Bin/../PerlVendor";

use iMSCP::Debug;
use iMSCP::Boot;
use iMSCP::IP;
use iMSCP::Mail;
use iMSCP::Database;
use iMSCP::Execute;

# Turn off localisation features to force any command output to be in english
$ENV{'LC_MESSAGES'} = 'C';

newDebug('imscp-net-interfaces-mngr.log');

silent(1);

our $proceed = $ARGV[0];

sub startUp
{
	umask(027);

	iMSCP::Boot->getInstance()->boot({ 'nolock' => 'yes', 'config_readonly' => 'yes' });

	0;
}

sub addVirtualNetcard
{
	my ($rs, $stdout, $stderr);
	my $database = iMSCP::Database->new()->factory();
	my $ips = iMSCP::IP->new();
	my $rdata = $database->doQuery('ip_id', 'SELECT `ip_id`, `ip_number`, `ip_card` FROM `server_ips`');

	unless (ref $rdata eq 'HASH') {
		error($rdata);
		iMSCP::Mail->new()->errmsg($rdata);
	} else {
		for(values %$rdata){
			if($ips->getCardByIP($_->{'ip_number'})) { # is an IP attached to a network card?
				# if is a virtual interface?
				my $vcard = $ips->addedToVCard($_->{'ip_number'});
				#if($vcard){
					#my $msg =
						#"$_->{ip_number} is already attached to $vcard\n".
						#"Consider remove from network configuration ".
						#"and let i-MSCP handle it"
					#;
					#warning("$msg");
					#iMSCP::Mail->new()->warnMsg($msg);
				#}
			} else { # IP is not attached so we will attach to virtual card
				# check if physical network card exits
				if($ips->existsNetCard($_->{'ip_card'})) {
					$rs = $ips->attachIpToNetCard($_->{'ip_card'}, $_->{'ip_number'});

					if($rs) {
						my $msg = "Unable to add $_->{'ip_number'} to $_->{'ip_card'}";
						error($msg) if $rs;
						iMSCP::Mail->new()->errmsg($msg);
					}
				} else {
					my $msg =
						"Card $_->{'ip_card'} doesn't exist. Please fix this in " .
						"$main::imscpConfig{BASE_SERVER_VHOST_PREFIX}" .
						"$main::imscpConfig{BASE_SERVER_VHOST}/admin/ip_manage.php";
					error($msg);
					iMSCP::Mail->new()->errmsg($msg);
				}
			}
		}

		my @cards = $ips->getNetCards();

		for(@cards) {
			if(!$ips->isCardUp($_)) {
				# netcard is not up so we try put that up
				$rs = execute("/sbin/ifconfig $_ up", \$stdout, \$stderr);
				debug($stdout) if $stdout;
				error($stderr) if $stderr && $rs;
				iMSCP::Mail->new()->errmsg($stderr) if $stderr && $rs;
			}
		}
	}

	0;
}

sub removeVirtualNetcard
{
	my $database = iMSCP::Database->new()->factory();
	my $ips = iMSCP::IP->new();
	$ips->loadIPs();

	my $rdata = $database->doQuery(
		'ip_id',
		"
			SELECT
				`ip_id`, `ip_number`, `ip_card`
			FROM
				`server_ips`
			WHERE
				`ip_number` != '$main::imscpConfig{'BASE_SERVER_IP'}'
		"
	);
	unless (ref $rdata eq 'HASH') {
		error($rdata);
		iMSCP::Mail->new()->errmsg($rdata);
	} else {
		for(values %$rdata) {
			my $vcard = $ips->addedToVCard($_->{'ip_number'});

			if($vcard) {
				# We bring down only virtual network cards
				my $rs = $ips->detachIpFromNetCard($_->{'ip_number'});

				if($rs) {
					my $msg = "Unable to detach $_->{'ip_number'}";
					error($msg);
					iMSCP::Mail->new()->errmsg($msg);
				}
			}
		}
	}

	0;
}

sub process
{
	my $rs = 0;

	if ($proceed && $proceed eq 'start') {
		$rs = addVirtualNetcard();
		return $rs if $rs;
	} elsif ($proceed && $proceed eq 'restart') {
		$rs = removeVirtualNetcard();
		return $rs if $rs;
		$rs = addVirtualNetcard();
		return $rs if $rs;
	} elsif ($proceed && $proceed eq 'stop') {
		$rs = removeVirtualNetcard();
		return $rs if $rs;
	} else {
		my $msg = "Must be called with 'start', 'restart' or 'stop' argument";
		error($msg);
		iMSCP::Mail->new()->errmsg($msg);
		exit 1;
	}

	my $database = iMSCP::Database->new('db' => $main::imscpConfig{'DATABASE_TYPE'})->factory();

	my $rdata = $database->doQuery('dummy', "DELETE FROM `server_ips` WHERE `ip_status` = 'todelete'");
	unless (ref $rdata eq 'HASH') {
		error($rdata);
		iMSCP::Mail->new()->errmsg($rdata);
	}

	$rdata = $database->doQuery('dummy', "UPDATE `server_ips` SET `ip_status` = 'ok'");
	unless (ref $rdata eq 'HASH') {
		error($rdata);
		iMSCP::Mail->new()->errmsg($rdata);
	}

	0;
}

my $rs = 0;

$rs = startUp();
$rs ||= process();

exit $rs;
