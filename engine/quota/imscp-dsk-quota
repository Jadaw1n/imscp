#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2013 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category		i-MSCP
# @copyright	2010-2013 by i-MSCP | http://i-mscp.net
# @author		Daniel Andreca <sci2tech@gmail.com>
# @link			http://i-mscp.net i-MSCP Home Site
# @license		http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..";
use lib "$FindBin::Bin/../PerlLib";

use iMSCP::Debug;
use iMSCP::Boot;
use iMSCP::Execute;
use iMSCP::Mail;
use Servers::mta;

# Turn off localisation features to force any command output to be in english
$ENV{'LC_MESSAGES'} = 'C';

newDebug('imscp-dsk-quota.log');

sub startUp
{
	umask(027);

	iMSCP::Boot->getInstance()->boot({ 'nolock' => 'yes', 'config_readonly' => 'yes' });

	0;
}

sub quotaFiles
{
	my ($rs, $rdata) = (0, undef);

	my $database = iMSCP::Database->new()->factory();

	my $sql = "SELECT `domain_id`, `domain_name` FROM `domain` WHERE `domain_status` = ?";
	$rdata = $database->doQuery('domain_id', $sql, 'ok');

	unless (ref $rdata eq 'HASH'){
		error($rdata);
		iMSCP::Mail->new()->errmsg($rdata);
		$rs = 1;
	} else {
		my $mta	= Servers::mta->factory();

		for (keys %$rdata) {

			my $domainName = $rdata->{$_}->{'domain_name'};
			my $domainId = $rdata->{$_}->{'domain_id'};
			my $size = 0;
			my $fileSize = 0;
			my $mailSize = 0;
			my @cmd;

			if ($^O =~ /bsd$/) {
				@cmd = (
					$main::imscpConfig{'CMD_DU'} . ' -I "backups/*" -I "logs/*.log" -d 0 ' . "$main::imscpConfig{'USER_WEB_DIR'}/$domainName",
					$main::imscpConfig{'CMD_DU'} . ' -d 0 '."$mta->{'config'}->{'MTA_VIRTUAL_MAIL_DIR'}/$domainName"
				);
			} else {
				@cmd = (
					"$main::imscpConfig{'CMD_DU'} --exclude='backups/*' --exclude='logs/*.log' -s -B1 $main::imscpConfig{'USER_WEB_DIR'}/$domainName",
					"$main::imscpConfig{'CMD_DU'} -s -B1 $mta->{'config'}->{'MTA_VIRTUAL_MAIL_DIR'}/$domainName"
				);
			}
			
			# Also check the alias mail dirs
			$sql = "SELECT `alias_name` FROM `domain_aliasses` WHERE `domain_id` = ? AND `alias_status` = ?";
			my $rdataAlias = $database->doQuery('alias_name', $sql, $domainId, 'ok');
			if (ref $rdataAlias eq 'HASH'){
				for (keys %$rdataAlias) {
					my $aliasName = $rdataAlias->{$_}->{'alias_name'};
					my $aliasMailDir = "$mta->{'config'}->{'MTA_VIRTUAL_MAIL_DIR'}/$aliasName";
					if (-d $aliasMailDir) {
						if ($^O =~ /bsd$/) {
							push(@cmd, $main::imscpConfig{'CMD_DU'} . ' -d 0 '.$aliasMailDir);
						} else {
							push(@cmd, "$main::imscpConfig{'CMD_DU'} -s -B1 $aliasMailDir");
						}
					}
				}
			}

			for(@cmd) {
				my ($stdout, $stderr);
				$rs = execute($_, \$stdout, \$stderr);
				error($stderr) if $stderr && $rs;
				return $rs if $rs;

				if(defined $stdout) {
					debug($stdout);

					if(/$main::imscpConfig{'USER_WEB_DIR'}/) {
						$stdout =~ /^(\d+)/;
						$fileSize = ($^O =~ /bsd$/) ? $1*1024 : $1 if $1;
					} else {
						$stdout =~ /^(\d+)/;
						$mailSize += ($^O =~ /bsd$/) ? $1*1024 : $1 if $1;
					}
				}
			}

			$size = $fileSize + $mailSize;

			if ($size > 0) {
				$sql = "
					UPDATE
						`domain`
					SET
						`domain_disk_usage` = ?, `domain_disk_file` = ?, `domain_disk_mail` = ?
					WHERE
						`domain_id` = ?
				";
				my $rsdata = $database->doQuery('update', $sql, $size, $fileSize, $mailSize, $domainId);

				unless (ref $rsdata eq 'HASH') {
					error($rsdata);
					iMSCP::Mail->new()->errmsg($rsdata);
					$rs = 1;
				}

				$sql = "UPDATE `quotatallies` SET `bytes_in_used` = ? WHERE `name` = ?";
				$rsdata = $database->doQuery('cnt', $sql, $size, $domainName);

				unless (ref $rsdata eq 'HASH') {
					error($rsdata);
					iMSCP::Mail->new()->errmsg($rsdata);
					$rs = 1;
				}
			}
		}
	}

	$rs;
}

sub quotaSql
{
	my $rs = 0;

	my $database = iMSCP::Database->new()->factory();

	my $sql = 'SHOW DATABASES';
	my $databases = $database->doQuery('Database', $sql);

	unless (ref $databases eq 'HASH'){
		error($databases);
		iMSCP::Mail->new()->errmsg($databases);
		return 1;
	}

	$sql = "SELECT `domain_id`, `domain_name`, `domain_disk_usage` FROM `domain` WHERE `domain_status` = ?";
	my $rdata = $database->doQuery('domain_id', $sql, 'ok');

	unless (ref $rdata eq 'HASH') {
		error($rdata);
		iMSCP::Mail->new()->errmsg($rdata);
		$rs = 1;
	} else {

		for (keys %$rdata) {
			my $domainId = $rdata->{$_}->{'domain_id'};
			my $domainName = $rdata->{$_}->{'domain_name'};
			my $diskUsage = $rdata->{$_}->{'domain_disk_usage'};
			$sql = "SELECT `sqld_id`, `sqld_name` FROM `sql_database` WHERE `domain_id` = ?";
			my $userDBs = $database->doQuery('sqld_id', $sql, $domainId);
			my $size = 0;
			my $sqlSize = 0;

			unless (ref $userDBs eq 'HASH') {
				error($userDBs);
				iMSCP::Mail->new()->errmsg($userDBs);
				$rs = 1;
			}

			for (keys %$userDBs) {
				my $sqldb_id = $userDBs->{$_}->{'sqld_id'};
				my $sqldb_name = $userDBs->{$_}->{'sqld_name'};

				if(grep{$_ eq $sqldb_name} keys %$databases) {

					$sql = "show table status from `$sqldb_name`";
					my $tables = $database->doQuery('Name ', $sql);

					unless (ref $tables eq 'HASH') {
						error("tables:$tables");
						iMSCP::Mail->new()->errmsg($tables);
						$rs = 1;
					}

					for(keys %$tables) {
						$size +=
							($tables->{$_}->{'Data_length'} =~ /^\d+$/ ? $tables->{$_}->{'Data_length'} : 0) +
							($tables->{$_}->{'Index_length'} =~ /^\d+$/ ? $tables->{$_}->{'Index_length'} : 0);
					}
				} else {
					error("Database '$sqldb_name' exists only in table 'sql_database'");
					iMSCP::Mail->new()->errmsg("Database '$sqldb_name' exists only in table 'sql_database'");
				}
			}

			if ($size > 0) {

				$sqlSize += $size;
				$size += $diskUsage;

				$sql = "UPDATE `domain` SET `domain_disk_usage` = ?, `domain_disk_sql` = ? WHERE `domain_id` = ?";
				my $quota = $database->doQuery('update ', $sql, $size, $sqlSize, $domainId);

				unless (ref $quota eq 'HASH') {
					error($quota);
					iMSCP::Mail->new()->errmsg($quota);
					$rs = 1;
				}

				$sql = "UPDATE `quotatallies` SET `bytes_in_used` = ? WHERE `name` = ?";
				$quota = $database->doQuery('cnt', $sql, $size, $domainName);

				unless (ref $quota eq 'HASH') {
					error($quota);
					iMSCP::Mail->new()->errmsg($quota);
					$rs = 1;
				}
			}
		}
	}

	$rs;
}

my $rs = 0;

$rs = startUp();
$rs ||= quotaFiles();
$rs ||= quotaSql();

exit $rs;
